[{"path":[]},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Green. Maintainer.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Green M (2021). dammmdatagen: Marketing Mix Modeling Data Generator. R package version 1.0.0, https://doktormike.github.io/dammmdatagen/.","code":"@Manual{,   title = {dammmdatagen: Marketing Mix Modeling Data Generator},   author = {Michael Green},   year = {2021},   note = {R package version 1.0.0},   url = {https://doktormike.github.io/dammmdatagen/}, }"},{"path":"https://doktormike.github.io/dammmdatagen/index.html","id":"dammmdatagen-","dir":"","previous_headings":"","what":"Marketing Mix Modeling Data Generator","title":"Marketing Mix Modeling Data Generator","text":"goal dammmdatagen make easy marketing mix modeling professionals get access realistic data sets ground truth known. fascilitates development provides end value stakeholders MMM.","code":""},{"path":[]},{"path":"https://doktormike.github.io/dammmdatagen/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Marketing Mix Modeling Data Generator","text":"can install dammmdatagen github :","code":"# install.packages(\"devtools\") devtools::install_github(\"DoktorMike/dammmdatagen\")"},{"path":"https://doktormike.github.io/dammmdatagen/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Marketing Mix Modeling Data Generator","text":"basic example shows generate small 1 year data set. can lot course! small snippet ’ll generate 1 month worth competitor media spendings data plot .  Just can generate competitor spending data can also generate macroeconomical data. types indicators typically slow moving time minor temporal differences.","code":"# load useful libraries library(dammmdatagen)  # generate a basic data set mydf <- generateCovariatesData() #> Joining, by = \"date\" #> Joining, by = \"date\" #> Joining, by = \"date\" head(mydf) #> # A tibble: 6 × 37 #>   date       sunshine precipitation temperature competitor_a competitor_b #>   <date>        <dbl>         <dbl>       <dbl>        <dbl>        <dbl> #> 1 2020-12-18 -0.729          -1.66        0.118        60000        20000 #> 2 2020-12-19 -0.197          -1.87        0.322       100000        40000 #> 3 2020-12-20  1.04           -1.37       -1.27         40000            0 #> 4 2020-12-21  0.157           0.457       0.231        50000        10000 #> 5 2020-12-22  0.00165         1.70        1.55         40000        90000 #> 6 2020-12-23 -0.311           0.995       0.719        10000        60000 #> # … with 31 more variables: competitor_c <dbl>, cpi <dbl>, cci <dbl>, #> #   gdp <dbl>, dist_product_a <dbl>, dist_product_b <dbl>, #> #   dist_product_c <dbl>, price_product_a <dbl>, price_product_b <dbl>, #> #   price_product_c <dbl>, net_display <dbl>, net_facebook <dbl>, #> #   net_search_branded <dbl>, net_tv <dbl>, net_radio <dbl>, net_ooh <dbl>, #> #   net_print <dbl>, imp_display <dbl>, imp_facebook <dbl>, #> #   imp_search_branded <dbl>, imp_tv <dbl>, imp_radio <dbl>, imp_ooh <dbl>, … library(dammmdatagen) library(ggplot2) library(dplyr) library(tidyr) library(scales)   generateCompetitorData(fromDate = Sys.Date()-30, toDate = Sys.Date()) %>%    gather(\"competitor\", \"spend\", -\"date\") %>%    ggplot(aes(y=spend, x=date, fill=competitor)) +    geom_bar(stat=\"identity\", position = position_stack()) +    theme_minimal() + scale_y_continuous(labels = dollar_format(prefix = \"kr. \")) generateMacroData(fromDate = Sys.Date()-30, toDate = Sys.Date()) %>%    gather(\"indicator\", \"value\", -\"date\") %>%    ggplot(aes(y=value, x=date, color=indicator)) +    geom_line(size = 1.5) + theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/index.html","id":"event-type-data","dir":"","previous_headings":"","what":"Event type data","title":"Marketing Mix Modeling Data Generator","text":"Event data modeled poisson distribution low incidence.  incidence can course controlled. done via freq parameter.","code":"generateEventData(Sys.Date()-265, Sys.Date()) %>%   gather(type, value, -date) %>%   ggplot(aes(y=value, x=date, fill=type)) +   geom_bar(stat=\"identity\") + theme_minimal() generateEventData(Sys.Date()-265, Sys.Date(), freq = 0.1) %>%   gather(type, value, -date) %>%   ggplot(aes(y=value, x=date, fill=type)) +   geom_bar(stat=\"identity\") + theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/index.html","id":"media-generation","dir":"","previous_headings":"","what":"Media generation","title":"Marketing Mix Modeling Data Generator","text":"Generating media general bit complicated need information since MMM models ’s primarily care . need three data.frames; net, impressions cpms. also differentiate offline online media. difference rather artificial right now ’s futureproof package.","code":"mydflist <- generateOnlineData(Sys.Date()-30, Sys.Date()) mydflist[[\"impression\"]] %>%   gather(type, impression, -date) %>%   ggplot(aes(y=impression, x=date, fill=type)) +   geom_bar(stat=\"identity\") + theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Marketing Mix Modeling Data Generator","text":"Please note dammmdatagen project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/dammmdatagen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dammmdatagen: Marketing Mix Modeling Data Generator — dammmdatagen-package","title":"dammmdatagen: Marketing Mix Modeling Data Generator — dammmdatagen-package","text":"package aims general purpose example data generator Marketing Mix Modeling Benchmark purposes.","code":""},{"path":[]},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCompetitorData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate competitor media spending as list prices data — generateCompetitorData","title":"Generate competitor media spending as list prices data — generateCompetitorData","text":"Generate competitor media spending list prices data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCompetitorData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate competitor media spending as list prices data — generateCompetitorData","text":"","code":"generateCompetitorData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"competitor_a\", \"competitor_b\", \"competitor_c\") )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCompetitorData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate competitor media spending as list prices data — generateCompetitorData","text":"fromDate beginning time series toDate end time series mynames names attach generated data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCompetitorData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate competitor media spending as list prices data — generateCompetitorData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCompetitorData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate competitor media spending as list prices data — generateCompetitorData","text":"","code":"library(ggplot2) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr) generateCompetitorData(Sys.Date() - 30, Sys.Date()) %>%   gather(competitor, spend, -date) %>%   ggplot(aes(y = spend, x = date, fill = competitor)) +   geom_bar(stat = \"identity\", position = position_stack())"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCovariatesData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a marketing mix modeling covariates data set — generateCovariatesData","title":"Generate a marketing mix modeling covariates data set — generateCovariatesData","text":"function generates marketing mix modeling covariates data set based parameters given. uses many different stochastical processes accomplish dynamics behind available user manipulate. supposed generate tha variables use marketing mix model except response variable .e. dependent variable.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCovariatesData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a marketing mix modeling covariates data set — generateCovariatesData","text":"","code":"generateCovariatesData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   sector = \"retail\",   onlineInsertionNames = c(\"display\", \"facebook\", \"search_branded\"),   offlineInsertionNames = c(\"tv\", \"radio\", \"ooh\", \"print\"),   priceNames = c(\"price_product_a\", \"price_product_b\", \"price_product_c\"),   distributionNames = c(\"dist_product_a\", \"dist_product_b\", \"dist_product_c\"),   weatherNames = c(\"sunshine\", \"precipitation\", \"temperature\"),   competitorNames = c(\"competitor_a\", \"competitor_b\", \"competitor_c\"),   macroNames = c(\"cpi\", \"cci\", \"gdp\"),   eventNames = c(\"event_a\", \"event_b\") )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCovariatesData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a marketing mix modeling covariates data set — generateCovariatesData","text":"fromDate beginning time series toDate end time series sector name sector simulate (currently used) onlineInsertionNames names online media insertion wish use offlineInsertionNames names offline media insertion wish use priceNames names different product prices distributionNames names different product distributions weatherNames names weather data measurements use competitorNames names competitor considered macroNames names macroeconomical factors simulate eventNames names events add","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCovariatesData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a marketing mix modeling covariates data set — generateCovariatesData","text":"list tibble containing data mentioned","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateCovariatesData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a marketing mix modeling covariates data set — generateCovariatesData","text":"","code":"a <- 1"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateDistributionData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate distribution data as absolute levels — generateDistributionData","title":"Generate distribution data as absolute levels — generateDistributionData","text":"Generate distribution data absolute levels","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateDistributionData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate distribution data as absolute levels — generateDistributionData","text":"","code":"generateDistributionData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"product_a\", \"product_b\", \"product_c\"),   initDist = c(1000, 500, 800) )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateDistributionData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate distribution data as absolute levels — generateDistributionData","text":"fromDate beginning time series toDate end time series mynames names attach generated data initDist vector initial distributions total numbers","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateDistributionData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate distribution data as absolute levels — generateDistributionData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateDistributionData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate distribution data as absolute levels — generateDistributionData","text":"","code":"library(ggplot2) library(dplyr) library(tidyr) generateDistributionData(   Sys.Date() - 30, Sys.Date(),   c(\"product_a\", \"product_b\", \"product_c\"), c(20, 50, 10) ) %>%   gather(type, distribution, -date) %>%   ggplot(aes(y = distribution, x = date, color = type)) +   geom_line() +   theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateEventData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate offline media data — generateEventData","title":"Generate offline media data — generateEventData","text":"Generate offline media data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateEventData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate offline media data — generateEventData","text":"","code":"generateEventData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"event_a\", \"event_b\"),   freq = 0.01 )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateEventData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate offline media data — generateEventData","text":"fromDate beginning time series toDate end time series mynames names attach generated data freq rate incidence events","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateEventData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate offline media data — generateEventData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateEventData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate offline media data — generateEventData","text":"","code":"library(ggplot2) library(dplyr) library(tidyr) generateEventData(Sys.Date() - 30, Sys.Date()) %>%   gather(type, value, -date) %>%   ggplot(aes(y = value, x = date, color = type)) +   geom_line() +   theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateMacroData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate macro economical data — generateMacroData","title":"Generate macro economical data — generateMacroData","text":"Generate macro economical data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateMacroData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate macro economical data — generateMacroData","text":"","code":"generateMacroData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"cpi\", \"cci\", \"gdp\") )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateMacroData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate macro economical data — generateMacroData","text":"fromDate beginning time series toDate end time series mynames names attach generated data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateMacroData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate macro economical data — generateMacroData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateMacroData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate macro economical data — generateMacroData","text":"","code":"library(ggplot2) library(dplyr) library(tidyr) generateMacroData(Sys.Date() - 30, Sys.Date()) %>%   gather(type, measure, -date) %>%   ggplot(aes(y = measure, x = date, color = type)) +   geom_line() +   theme_minimal()   ts.plot(arima.sim(list(order = c(1, 1, 0), ar = 0.7), n = 365))"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOfflineData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate offline media data — generateOfflineData","title":"Generate offline media data — generateOfflineData","text":"Generate offline media data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOfflineData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate offline media data — generateOfflineData","text":"","code":"generateOfflineData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"tv\", \"radio\", \"ooh\"),   avgcpm = 0.5,   avgnet = 10000 )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOfflineData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate offline media data — generateOfflineData","text":"fromDate beginning time series toDate end time series mynames names attach generated data avgcpm average Cost Per 1000 Impressions avgnet average net investment per insertion day","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOfflineData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate offline media data — generateOfflineData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOfflineData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate offline media data — generateOfflineData","text":"","code":"library(ggplot2) library(dplyr) library(tidyr) mydflist <- generateOfflineData(Sys.Date() - 30, Sys.Date()) mydflist[[\"impression\"]] %>%   gather(type, impression, -date) %>%   ggplot(aes(y = impression, x = date, color = type)) +   geom_line() +   theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOnlineData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate online media data — generateOnlineData","title":"Generate online media data — generateOnlineData","text":"Generate online media data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOnlineData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate online media data — generateOnlineData","text":"","code":"generateOnlineData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"display\", \"facebook\", \"search_branded\"),   avgcpm = 0.5,   avgnet = 10000 )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOnlineData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate online media data — generateOnlineData","text":"fromDate beginning time series toDate end time series mynames names attach generated data avgcpm average Cost Per 1000 Impressions avgnet average net investment per insertion day","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOnlineData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate online media data — generateOnlineData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateOnlineData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate online media data — generateOnlineData","text":"","code":"library(ggplot2) library(dplyr) library(tidyr) mydflist <- generateOnlineData(Sys.Date() - 30, Sys.Date()) mydflist[[\"impression\"]] %>%   gather(type, impression, -date) %>%   ggplot(aes(y = impression, x = date, color = type)) +   geom_line() +   theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generatePriceData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate price data — generatePriceData","title":"Generate price data — generatePriceData","text":"Generate price data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generatePriceData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate price data — generatePriceData","text":"","code":"generatePriceData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"product_a\", \"product_b\", \"product_c\") )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generatePriceData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate price data — generatePriceData","text":"fromDate beginning time series toDate end time series mynames names attach generated data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generatePriceData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate price data — generatePriceData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generatePriceData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate price data — generatePriceData","text":"","code":"library(ggplot2) library(dplyr) library(tidyr) generatePriceData(Sys.Date() - 30, Sys.Date()) %>%   gather(type, price, -date) %>%   ggplot(aes(y = price, x = date, color = type)) +   geom_line() +   theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateRetailData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a marketing mix modeling data set — generateRetailData","title":"Generate a marketing mix modeling data set — generateRetailData","text":"function generates marketing mix modeling data set based parameters given Retail case Revenue response. uses many different stochastical processes accomplish dynamics behind available user manipulate.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateRetailData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a marketing mix modeling data set — generateRetailData","text":"","code":"generateRetailData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   kpi = \"revenue\",   sector = \"retail\",   onlineInsertionNames = c(\"display\", \"facebook\", \"search_branded\"),   offlineInsertionNames = c(\"tv\", \"radio\", \"ooh\", \"print\"),   priceNames = c(\"price_product_a\", \"price_product_b\", \"price_product_c\"),   distributionNames = c(\"dist_product_a\", \"dist_product_b\", \"dist_product_c\"),   weatherNames = c(\"sunshine\", \"precipitation\", \"temperature\"),   competitorNames = c(\"competitor_a\", \"competitor_b\", \"competitor_c\"),   macroNames = c(\"cpi\", \"cci\", \"gdp\"),   eventNames = c(\"event_a\", \"event_b\") )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateRetailData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a marketing mix modeling data set — generateRetailData","text":"fromDate beginning time series toDate end time series kpi name kpi (response) simulate sector name sector simulate (currently used) onlineInsertionNames names online media insertion wish use offlineInsertionNames names offline media insertion wish use priceNames names different product prices distributionNames names different product distributions weatherNames names weather data measurements use competitorNames names competitor considered macroNames names macroeconomical factors simulate eventNames names events add","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateRetailData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a marketing mix modeling data set — generateRetailData","text":"list tibble containing data mentioned","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateRetailData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a marketing mix modeling data set — generateRetailData","text":"","code":"a <- 1"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateWeatherData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate weather data — generateWeatherData","title":"Generate weather data — generateWeatherData","text":"Generate weather data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateWeatherData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate weather data — generateWeatherData","text":"","code":"generateWeatherData(   fromDate = Sys.Date() - 1 * 365,   toDate = Sys.Date(),   mynames = c(\"sunshine\", \"precipitation\", \"temperature\") )"},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateWeatherData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate weather data — generateWeatherData","text":"fromDate beginning time series toDate end time series mynames names attach generated data","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateWeatherData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate weather data — generateWeatherData","text":"tibble generated data one column element name","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/generateWeatherData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate weather data — generateWeatherData","text":"","code":"library(ggplot2) library(dplyr) library(tidyr) generateWeatherData(Sys.Date() - 30, Sys.Date()) %>%   gather(type, measure, -date) %>%   ggplot(aes(y = measure, x = date, color = type)) +   geom_line() +   theme_minimal()"},{"path":"https://doktormike.github.io/dammmdatagen/reference/salesUnitsPerDay.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate units sold per day based on industry and population size of country. — salesUnitsPerDay","title":"Estimate units sold per day based on industry and population size of country. — salesUnitsPerDay","text":"utilizes heuristics create realistic estimation many units company can seel within industry given population size country.","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/salesUnitsPerDay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate units sold per day based on industry and population size of country. — salesUnitsPerDay","text":"","code":"salesUnitsPerDay(industry = \"telecom\", population = 5e+06)"},{"path":"https://doktormike.github.io/dammmdatagen/reference/salesUnitsPerDay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate units sold per day based on industry and population size of country. — salesUnitsPerDay","text":"industry industry simulate defaults telecom population population size defaults 5 million people","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/salesUnitsPerDay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate units sold per day based on industry and population size of country. — salesUnitsPerDay","text":"number expected sold units per average day","code":""},{"path":"https://doktormike.github.io/dammmdatagen/reference/salesUnitsPerDay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate units sold per day based on industry and population size of country. — salesUnitsPerDay","text":"","code":"library(ggplot2) library(MASS) #>  #> Attaching package: ‘MASS’ #> The following object is masked from ‘package:dplyr’: #>  #>     select avgsalesperday <- salesUnitsPerDay(\"telecom\") avgsales <- MASS::rnegbin(100, avgsalesperday[[\"UnitsPerDay\"]], 1) qplot(1:length(avgsales), avgsales) + geom_line()"}]
